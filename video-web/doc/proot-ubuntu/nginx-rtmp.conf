# worker_processes是个主模块指令，指定了Nginx要开启的进程数。每个Nginx进程平均耗费10M~12M内存。建议指定和CPU的数量一致即可
worker_processes  1;

# 包含模块，不加的话会有：unknown directive "rtmp" in /etc/nginx/nginx.conf
include /etc/nginx/modules-enabled/*.conf;

# events事件指令是设定Nginx的工作模式及连接数上限
events {
    # worker_connections也是个事件模块指令，用于定义Nginx每个进程的最大连接数，默认是1024。
    # 最大客户端连接数由worker_processes和worker_connections决定，即Max_client=worker_processes*worker_connections。
    worker_connections  10;
}

# http
http {
    # include是个主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度。类似于Apache中的include方法。
    include       mime.types;
    # default_type属于HTTP核心模块指令，这里设定默认类型为二进制流，也就是当文件类型未定义时使用这种方式，
    # 例如在没有配置PHP环境时，Nginx是不予解析的，此时，用浏览器访问PHP文件就会出现下载窗口。
    default_type  application/octet-stream;
    # sendfile参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞；
    sendfile        on;
    # 连接超时时间
    keepalive_timeout  65;

    upstream video-platform {
        server 127.0.0.1:7077 weight=1 max_fails=100 fail_timeout=120s ;    # 此处填后端端口地址
    }

    server {
        listen [::]:8083 ipv6only=off; # 根据业务情况进行调整
        server_name 127.0.0.1; # 根据业务情况进行调整
        location = /stub_status { # 具体路径可根据业务情况进行调整
            stub_status;
        }
    }

    server {
        listen       [::]:3000 ipv6only=off;  # 添加 IPv6 支持
        server_name  127.0.0.1;

        # video-vant-mobile
        location / {
            root /home/webui/video-vant-mobile;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # video-platform
        location /api/ {
            rewrite ^/api/(.*)$ /$1 break;      # 重写Url路径
            add_header         Access-Control-Allow-Origin *;
            proxy_pass         http://video-platform;          # 反向代理
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        }

        # WebSocket 代理
        location /ws/ {
            proxy_pass         http://video-platform;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection "upgrade";
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    server {
        listen       [::]:8080 ipv6only=off;
        server_name  127.0.0.1;

        # 回放配置，需在直播配置的基础上
        location /live {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            alias /home/video-live/lives;
            expires -1;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *; # 一定要加，不加后面视频播放就会显示跨域
        }

        # hls
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            alias /home/video-hls/videos; # alias 功能同rewrite
            expires -1;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *; # 一定要加，不加后面视频播放就会显示跨域
        }

        # gif & mp4
        location /back {
            alias /home/back; # alias 功能同rewrite
            add_header Access-Control-Allow-Origin *;
        }

    }
}


# 开始RTMP模块的配置
rtmp {

    server {
        listen 8081;  # 监听8081端口
        chunk_size 4096;  # 设置RTMP数据包的chunk大小为4000字节

        # --- 视频点播 start ---
        # 应用程序vod1的配置
        application vod1 {
            play /home/video-vod/flvs;  # 播放目录/var/flvs下的FLV文件
        }

        # 应用程序vod2的配置
        application vod2 {
            play /home/video-vod/mp4s;  # 播放目录/var/mp4s下的MP4文件
        }
        # --- 视频点播 end ---

        # --- 直播配置 start ---
        application live {
            live on;
            hls on; #这个参数把直播服务器改造成实时回放服务器。
            wait_key on; #对视频切片进行保护，这样就不会产生马赛克了。
            hls_path /home/video-live/lives; #切片视频文件存放位置。
            hls_fragment 10s;     #每个视频切片的时长。
            hls_playlist_length 60s;  #总共可以回看的事件，这里设置的是1分钟。
            hls_continuous on; #连续模式。
            hls_cleanup on;    #对多余的切片进行删除。
            hls_nested on;     #嵌套模式。
        }
        # --- 直播配置 end ---

        # --- hls start --- ffmpeg 推流到这里 再到上面拉取hls流
        application hls {
            live on;
            hls on;
            hls_path /home/video-hls/videos;
            hls_fragment 10s; # 一般默认切分5s
            hls_cleanup off; # 默认开启清理
        }
        # --- hls end ---

        #  --- TV模式 start ---
        # 一个发布者，多个订阅者
        application mytv {  # 应用程序mytv的配置
            live on;  # 启用直播流
            record all;  # 记录所有流
            record_path /home/video-live/tvs;  # 记录文件的保存路径
            record_max_size 1K;  # 每个记录文件的最大大小为1K
            record_unique on;  # 为每个流添加唯一的时间戳
            allow publish 127.0.0.1;  # 允许从本地主机发布流
            deny publish all;  # 禁止从其他所有源发布流
            # allow play all;  # 允许所有客户端播放流
        }
        #  --- TV模式 start ---

        # 应用程序big的配置 转码（需要ffmpeg）
        application big {
            live on;  # 启用直播流
            # 当有流发布时，运行ffmpeg命令来转码
            # 将应用和流名称作为参数传入
            # 此ffmpeg命令接收此应用的流并将其分辨率降低至3232
            # 流将被发布到'small'应用下同名的流
            exec /usr/local/bin/ffmpeg -re -i rtmp://localhost:8081/$app/$name -vcodec flv -acodec copy -s 3232 -f flv rtmp://localhost:8081/small/${name};
        }

        # 应用程序small的配置
        application small {
            live on;  # 启用直播流
            # 低分辨率视频流到达这里，来自ffmpeg
        }

        # 应用程序mypush的配置
        application mypush {
            live on;  # 启用直播流
            # 所有发布到这里的流都会自动推送到以下两台机器
            # push rtmp1.example.com;
            # push rtmp2.example.com:1934;
        }

        # 应用程序mypull的配置
        application mypull {
            live on;  # 启用直播流
            # 从远程机器拉取所有流并在本地播放
            # pull rtmp://rtmp3.example.com pageUrl= www.example.com/index.html;
        }

        # --- 应用程序videochat的配置 start ---
        # 多个发布者，多个订阅者
        # 不进行检查，不录制流
        application videochat {
            live on;  # 启用直播流

            # 下面的通知会接收到所有的会话变量以及特定的调用参数
            # 以HTTP POST请求的形式

            # 发送HTTP请求并根据HTTP返回码决定是否允许
            # 从此连接发布流
            on_publish http://localhost:8082/publish;

            # 播放流时也一样
            on_play http://localhost:8082/play;

            # 发布/播放结束（在断开连接时重复）
            on_done http://localhost:8082/done;

            # 记录每2分钟10个视频关键帧（无音频）
            record keyframes;
            record_path /home/video-live/videochat;
            record_max_frames 10;
            record_interval 2m;

            # 异步通知已录制的flv文件
            on_record_done http://localhost:8082/record_done;
        }
        #  --- 应用程序videochat的配置 end ---
    }
}
