pipeline {
    agent {
        docker {
            image 'maven:3.8.2-openjdk-17'
        }
    }

    environment {
        GIT_URL = 'https://gitee.com/anubiscl/video-platform.git' // GitHub 仓库 URL https://github.com/AnubisCL/video-platform.git
        BRANCH = 'main' // 替换为你想要构建的分支
        JAR_PATH = 'video-web/target/video-web.jar' // 替换为你的 Spring Boot 应用程序 JAR 文件名
        DEPLOY_DIR = '/home/webui/video-platform' // 替换为你要部署 JAR 包的目标目录

        DOCKER_FILE_PATH = 'DockerFile'
        DOCKER_IMAGE_NAME = 'video-platform-app'
        PORT = "7077"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: GIT_URL,
                branch: BRANCH
            }
        }

        stage('Get Commit Id') {
            steps {
                // 获取短哈希值并设置为 DOCKER_IMAGE_TAG
                script {
                    env.DOCKER_IMAGE_TAG = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                }
            }
        }

        stage('Config Init') {
            steps {
                sh 'java -version'
                sh 'cp /home/maven/conf/settings.xml /usr/share/maven/conf/settings.xml'
            }
        }

        stage('Build') {
            steps {
                echo '开始编译代码'
                sh 'mvn --version'
                sh 'mvn clean install -DskipTests' // 使用 Maven 构建项目，跳过测试
                sh 'ls video-web/target/'
                echo '代码编译成功'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('video-web') {
                        sh 'docker build -f ${DOCKER_FILE_PATH} -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo '开始部署程序'
                script {
                    sh """
                        # 获取当前运行的容器ID
                        OLD_CONTAINER_ID=\$(docker ps -qf "name=${DOCKER_IMAGE_NAME}")

                        if [ -n "\$OLD_CONTAINER_ID" ]; then
                            echo "停止并移除旧容器: \$OLD_CONTAINER_ID"
                            docker stop \$OLD_CONTAINER_ID
                            docker rm \$OLD_CONTAINER_ID
                        fi

                        # 启动新容器
                        echo "启动新容器"
                        docker run -d --name ${DOCKER_IMAGE_NAME} -p ${PORT}:${PORT} ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
                    """
                }
            }
        }
    }

}

