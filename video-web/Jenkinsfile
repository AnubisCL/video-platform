def createVersion() {
    // 版本号
    return new Date().formart('yyyyMMddHHmmss') + "_${env.BUILD_ID}"
}

pipeline {
    options {
        timeout(time: 1, unit: 'MINUTES')
    }

    agent {
        // any 代表 pipeline在 jenkins所在的主机执行
        // docker 代表 pipeline 都在docker内执行
        docker {
            image 'maven:3.8.2-openjdk-17' //docker镜像名称
            args '-v $HOME/.m2:/root/.m2' //镜像启动时参数，这里的目的是为了maven下载的jar包保留在宿主机上，这样下次编译就不需要下载了
        }
    }

    environment {
        // 自定义版本
        _APP_VERSION=createVersion()

        GIT_URL = 'https://gitee.com/anubiscl/video-platform.git' // GitHub 仓库 URL https://github.com/AnubisCL/video-platform.git
        BRANCH = 'main' // 替换为你想要构建的分支
        JAR_PATH = 'video-web/target/video-web.jar' // 替换为你的 Spring Boot 应用程序 JAR 文件名
        DEPLOY_DIR = '/home/webui/video-platform' // 替换为你要部署 JAR 包的目标目录

        DOCKER_FILE_PATH = 'DockerFile'
        DOCKER_IMAGE_NAME = 'video-platform-app'
        DOCKER_IMAGE_TAG = "${_APP_VERSION}"
    }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "Maven3.5.2[Local]"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: GIT_URL,
                branch: BRANCH
            }
        }
        stage('Build') {
            steps {
                echo '开始编译代码'
                sh 'mvn --version'
                sh 'mvn clean install -DskipTests' // 使用 Maven 构建项目，跳过测试
                sh 'ls ./target/'
                echo '代码编译成功'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    dir('video-web') {
                        sh 'docker build -f ${DOCKER_FILE_PATH} -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .'
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                echo '开始部署程序'
                script {
                    sh """
                        # 拉取新镜像
                        docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}

                        # 获取当前运行的容器ID
                        OLD_CONTAINER_ID=\$(docker ps -qf "name=${CONTAINER_NAME}")

                        if [ -n "\$OLD_CONTAINER_ID" ]; then
                            echo "停止并移除旧容器: \$OLD_CONTAINER_ID"
                            docker stop \$OLD_CONTAINER_ID
                            docker rm \$OLD_CONTAINER_ID
                        fi

                        # 启动新容器
                        echo "启动新容器"
                        docker run -d --name ${CONTAINER_NAME} -p ${PORT}:${PORT} ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
                    """
                }
            }
        }
    }
}
